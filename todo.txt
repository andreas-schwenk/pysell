# TODO (sell.py): embed variables into string via f"{v}"


# TODO: comment all code (e.g. build.py, sell.py lines 186ff); explain why sell.py is only ONE large file; insert "ToC" into large files and explain classes roughly

# TODO: split examples into files and add example questions for common math topics (ODE, diff, int, ...)

# TODO: enumeration lists 1., 2., ...
# TODO: allow e.g. %3 for static number questions
# TODO: allow text paragraphs outside of questions
# TODO: optional explanation texts
# TODO: conditional feedback
# TODO: debug-mode: show comments in python and text source code

# TODO: doc: matrix/vector parentheses based on langauge (German: round, other: brackets)
# TODO: doc: if a variable in math mode is a matrix and contains "augmented" as subterm, then it is represented as augmented matrix
# TODO: doc: note on packages -> which error occurs, if e.g. numpy is NOT installed??
# TODO: documentation for Conditional Multiple Choice (NOT available for single choice!)
# TODO: readme notes on libraries: numpy, sympy, sage, ... (sympy and numpy loading times slow: exclude optionally?)
# TODO: readme: add hints on fractions (sympy Fraction), ... + give more examples in general
# TODO: readme: clarify the use of "!"
# TODO: readme: explicitly describe all data types (int, float, rational, ...)
# TODO: readme: ODEs
# TODO: readme: notes on raising exceptions
# TODO: readme: "+-" in math mode

# TODO: comment out question if "#" is written before "QUESTION"

# TODO: gif-videos as tutorials for editing, compiling, debugging, using
# TODO: guide how to import questions to Moodle/Ilias

# TODO: publish pysell as python package

# TODO: use Babel in esbuild to support older browsers

# TODO: test everything in Windows

# TODO: automatically switch between round parentheses and brackets for vectors/matrices; based on LANG (de: round parentheses, otherwise: brackets)

# TODO: VSCode syntax highlighting plugin (or even complete lang workbench plugin??)
# TODO: Moodle plugin
# TODO: exercise download "shop"

# TODO: reorder/rename CSS class names



# TODO: sage math docs:

sage -python sell.py INPUT_PATH

from sage.all import *
f = sage.all.factorial(3)
type(f)
# <class 'int'>
x = sage.all.power_mod(2,100,123)
type(x)
# <class 'int'>
p = sage.all.random_prime(2^1536)
type(p)
# <class 'sage.rings.integer.Integer'>

----> TODO: more types (from old sellquiz-language-workbench: if type(value) == Integer or type(value) == int or type(value) == sage.rings.finite_rings.integer_mod.IntegerMod_int:)


# https://doc.sagemath.org/html/en/reference/py-modindex.html


---
Question.
@title
3. Restklassen
@sage

from sage.all import *
import random             # MUST be imported AFTER sage
n1 = 5
a = -random.randint(42, 73)
b = 100 * random.randint(2, 5)
c = random.randint(2, 5)
d = random.randint(11, 21)
x = sage.all.mod( a*(b+c*2^d), n1 )



n2 = 10
e = randint(1000, 100000)
f = randint(1000, 1000000)
g = randint(1000, 10000000)
h = randint(1000, 100000000)
y = mod( e*f*g*h, n2 )
@text
Berechne die folgenden Restklassen und gib jeweils den **Standardrepr√§sentaten** an:
- $ (e \cdot f \cdot g \cdot h) \mod n2 = $ #y
- $ a \cdot (b + c \cdot 2^{d}) \mod n1 = $ #x
---

